{"ast":null,"code":"var _jsxFileName = \"/Users/manidavilay/Documents/Projets/practical-reactjs-coding-challenges/text-analyzer-tool/src/components/TextArea/index.tsx\",\n  _s = $RefreshSig$();\nimport { useRef } from 'react';\nimport { pronouns } from \"../../data/pronouns\";\nimport './index.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TextArea = _ref => {\n  _s();\n  let {\n    setWordsCount,\n    setCharactersCount,\n    setSentencesCount,\n    setParagraphsCount,\n    setPronounsCount,\n    setLongestWord\n  } = _ref;\n  const textAreaRef = useRef(null);\n  const handleTextAreaChange = () => {\n    var _textAreaRef$current;\n    const textValue = ((_textAreaRef$current = textAreaRef.current) === null || _textAreaRef$current === void 0 ? void 0 : _textAreaRef$current.value) || \"\";\n    const whiteSpaceRegex = /\\b\\w+\\b/g;\n    const characterRegex = \"\";\n    const sentenceRegex = /[.?!]+(?=\\s*\\S)/;\n    const paragraphBreakRegex = /\\r?\\n+(?=\\s*\\S)/;\n    const pronounRegex = /\\s+|[\\W_]+/;\n    const specialCharacterRegex = /[\\s,?.!]+/;\n    const handleCounting = regex => {\n      return textValue ? textValue.split(regex).length : 0;\n    };\n    const wordsCountValue = handleCounting(whiteSpaceRegex);\n    const charactersCountValue = handleCounting(characterRegex);\n    const sentencesCountValue = handleCounting(sentenceRegex);\n    const paragraphsCountValue = handleCounting(paragraphBreakRegex);\n    const pronounsCountValue = textValue ? textValue.split(pronounRegex).filter(word => pronouns.includes(word.toLowerCase())).length : 0;\n    const longestWordValue = textValue ? textValue.split(specialCharacterRegex).reduce((longestWord, currentWord) => {\n      return currentWord.length > longestWord.length ? currentWord : longestWord;\n    }) : \"-\";\n    setWordsCount(wordsCountValue);\n    setCharactersCount(charactersCountValue);\n    setSentencesCount(sentencesCountValue);\n    setParagraphsCount(paragraphsCountValue);\n    setPronounsCount(pronounsCountValue);\n    setLongestWord(longestWordValue);\n  };\n  return /*#__PURE__*/_jsxDEV(\"textarea\", {\n    className: \"text-area\",\n    placeholder: \"Paste your text here...\",\n    autoFocus: true,\n    onChange: handleTextAreaChange,\n    ref: textAreaRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 10\n  }, this);\n};\n_s(TextArea, \"BYbRnLSQDOLW5pbx+V/xItG+Mbw=\");\n_c = TextArea;\nexport default TextArea;\nvar _c;\n$RefreshReg$(_c, \"TextArea\");","map":{"version":3,"names":["useRef","pronouns","TextArea","setWordsCount","setCharactersCount","setSentencesCount","setParagraphsCount","setPronounsCount","setLongestWord","textAreaRef","handleTextAreaChange","textValue","current","value","whiteSpaceRegex","characterRegex","sentenceRegex","paragraphBreakRegex","pronounRegex","specialCharacterRegex","handleCounting","regex","split","length","wordsCountValue","charactersCountValue","sentencesCountValue","paragraphsCountValue","pronounsCountValue","filter","word","includes","toLowerCase","longestWordValue","reduce","longestWord","currentWord"],"sources":["/Users/manidavilay/Documents/Projets/practical-reactjs-coding-challenges/text-analyzer-tool/src/components/TextArea/index.tsx"],"sourcesContent":["import { useRef } from 'react'\nimport { pronouns } from \"../../data/pronouns\"\nimport './index.scss'\n\ninterface Props {\n  setWordsCount: (value: number) => void\n  setCharactersCount: (value: number) => void\n  setSentencesCount: (value: number) => void\n  setParagraphsCount: (value: number) => void\n  setPronounsCount: (value: number) => void\n  setLongestWord: (value: string) => void\n}\n\nconst TextArea = ({ setWordsCount, setCharactersCount, setSentencesCount, setParagraphsCount, setPronounsCount, setLongestWord }: Props) => {\n  const textAreaRef = useRef<HTMLTextAreaElement>(null);\n\n  const handleTextAreaChange = () => {\n    const textValue = textAreaRef.current?.value || \"\"\n\n    const whiteSpaceRegex = /\\b\\w+\\b/g\n    const characterRegex = \"\"\n    const sentenceRegex = /[.?!]+(?=\\s*\\S)/\n    const paragraphBreakRegex = /\\r?\\n+(?=\\s*\\S)/\n    const pronounRegex = /\\s+|[\\W_]+/\n    const specialCharacterRegex = /[\\s,?.!]+/\n\n    const handleCounting = (regex: RegExp | string) => {\n      return textValue ? textValue.split(regex).length : 0\n    }\n\n    const wordsCountValue = handleCounting(whiteSpaceRegex)\n    const charactersCountValue = handleCounting(characterRegex)\n    const sentencesCountValue = handleCounting(sentenceRegex)\n    const paragraphsCountValue = handleCounting(paragraphBreakRegex)\n    const pronounsCountValue = textValue ? textValue.split(pronounRegex).filter(word => pronouns.includes(word.toLowerCase())).length : 0\n    const longestWordValue = textValue ? (textValue.split(specialCharacterRegex)).reduce((longestWord: string, currentWord: string) => {\n      return currentWord.length > longestWord.length ? currentWord : longestWord\n    }) : \"-\"\n\n    setWordsCount(wordsCountValue)\n    setCharactersCount(charactersCountValue)\n    setSentencesCount(sentencesCountValue)\n    setParagraphsCount(paragraphsCountValue)\n    setPronounsCount(pronounsCountValue)\n    setLongestWord(longestWordValue)\n  }\n\n  return <textarea className=\"text-area\" placeholder=\"Paste your text here...\" autoFocus onChange={handleTextAreaChange} ref={textAreaRef} />\n}\n\nexport default TextArea\n"],"mappings":";;AAAA,SAASA,MAAM,QAAQ,OAAO;AAC9B,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,OAAO,cAAc;AAAA;AAWrB,MAAMC,QAAQ,GAAG,QAA2H;EAAA;EAAA,IAA1H;IAAEC,aAAa;IAAEC,kBAAkB;IAAEC,iBAAiB;IAAEC,kBAAkB;IAAEC,gBAAgB;IAAEC;EAAsB,CAAC;EACrI,MAAMC,WAAW,GAAGT,MAAM,CAAsB,IAAI,CAAC;EAErD,MAAMU,oBAAoB,GAAG,MAAM;IAAA;IACjC,MAAMC,SAAS,GAAG,yBAAAF,WAAW,CAACG,OAAO,yDAAnB,qBAAqBC,KAAK,KAAI,EAAE;IAElD,MAAMC,eAAe,GAAG,UAAU;IAClC,MAAMC,cAAc,GAAG,EAAE;IACzB,MAAMC,aAAa,GAAG,iBAAiB;IACvC,MAAMC,mBAAmB,GAAG,iBAAiB;IAC7C,MAAMC,YAAY,GAAG,YAAY;IACjC,MAAMC,qBAAqB,GAAG,WAAW;IAEzC,MAAMC,cAAc,GAAIC,KAAsB,IAAK;MACjD,OAAOV,SAAS,GAAGA,SAAS,CAACW,KAAK,CAACD,KAAK,CAAC,CAACE,MAAM,GAAG,CAAC;IACtD,CAAC;IAED,MAAMC,eAAe,GAAGJ,cAAc,CAACN,eAAe,CAAC;IACvD,MAAMW,oBAAoB,GAAGL,cAAc,CAACL,cAAc,CAAC;IAC3D,MAAMW,mBAAmB,GAAGN,cAAc,CAACJ,aAAa,CAAC;IACzD,MAAMW,oBAAoB,GAAGP,cAAc,CAACH,mBAAmB,CAAC;IAChE,MAAMW,kBAAkB,GAAGjB,SAAS,GAAGA,SAAS,CAACW,KAAK,CAACJ,YAAY,CAAC,CAACW,MAAM,CAACC,IAAI,IAAI7B,QAAQ,CAAC8B,QAAQ,CAACD,IAAI,CAACE,WAAW,EAAE,CAAC,CAAC,CAACT,MAAM,GAAG,CAAC;IACrI,MAAMU,gBAAgB,GAAGtB,SAAS,GAAIA,SAAS,CAACW,KAAK,CAACH,qBAAqB,CAAC,CAAEe,MAAM,CAAC,CAACC,WAAmB,EAAEC,WAAmB,KAAK;MACjI,OAAOA,WAAW,CAACb,MAAM,GAAGY,WAAW,CAACZ,MAAM,GAAGa,WAAW,GAAGD,WAAW;IAC5E,CAAC,CAAC,GAAG,GAAG;IAERhC,aAAa,CAACqB,eAAe,CAAC;IAC9BpB,kBAAkB,CAACqB,oBAAoB,CAAC;IACxCpB,iBAAiB,CAACqB,mBAAmB,CAAC;IACtCpB,kBAAkB,CAACqB,oBAAoB,CAAC;IACxCpB,gBAAgB,CAACqB,kBAAkB,CAAC;IACpCpB,cAAc,CAACyB,gBAAgB,CAAC;EAClC,CAAC;EAED,oBAAO;IAAU,SAAS,EAAC,WAAW;IAAC,WAAW,EAAC,yBAAyB;IAAC,SAAS;IAAC,QAAQ,EAAEvB,oBAAqB;IAAC,GAAG,EAAED;EAAY;IAAA;IAAA;IAAA;EAAA,QAAG;AAC7I,CAAC;AAAA,GAnCKP,QAAQ;AAAA,KAARA,QAAQ;AAqCd,eAAeA,QAAQ;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}