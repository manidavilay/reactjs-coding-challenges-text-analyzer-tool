{"ast":null,"code":"var _jsxFileName = \"/Users/manidavilay/Documents/Projets/practical-reactjs-coding-challenges/text-analyzer-tool/src/components/TextArea/index.tsx\",\n  _s = $RefreshSig$();\nimport { useRef } from 'react';\nimport { pronouns } from \"../../data/pronouns\";\nimport './index.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TextArea = _ref => {\n  _s();\n  let {\n    setWordsCount,\n    setCharactersCount,\n    setSentencesCount,\n    setParagraphsCount,\n    setPronounsCount,\n    setLongestWord\n  } = _ref;\n  const textAreaRef = useRef(null);\n  const handleTextAreaChange = () => {\n    var _textAreaRef$current;\n    const textValue = ((_textAreaRef$current = textAreaRef.current) === null || _textAreaRef$current === void 0 ? void 0 : _textAreaRef$current.value) || \"\";\n    const whiteSpaceRegex = \" \";\n    const specialCharacterRegex = \"\";\n    const sentenceRegex = /[.?!]+(?=\\s*\\S)/;\n    const paragraphBreakRegex = /\\r?\\n+(?=\\s*\\S)/;\n    const pronounsRegex = /\\s+|[\\W_]+/;\n    const handleCounting = regex => {\n      return textValue ? textValue.split(regex).length : 0;\n    };\n    const wordsCountValue = handleCounting(whiteSpaceRegex);\n    const charactersCountValue = handleCounting(specialCharacterRegex);\n    const sentencesCountValue = handleCounting(sentenceRegex);\n    const paragraphsCountValue = handleCounting(paragraphBreakRegex);\n    const pronounsCountValue = textValue ? textValue.split(pronounsRegex).filter(word => pronouns.includes(word.toLowerCase())).length : 0;\n    setWordsCount(wordsCountValue);\n    setCharactersCount(charactersCountValue);\n    setSentencesCount(sentencesCountValue);\n    setParagraphsCount(paragraphsCountValue);\n    setPronounsCount(pronounsCountValue);\n  };\n\n  // const handleTextAreaChange = () => {\n  //   const textValue = textAreaRef.current?.value\n  //   const countingFunction = (regex: RegExp | string) => {\n  //     if (!textValue) {\n  //       return 0\n  //     }\n  //     return textValue?.split(regex).length\n  //   }\n  //   const wordsCountValue = countingFunction(\" \")\n  //   const charactersCountValue = countingFunction(\"\")\n  //   const sentencesCountValue = countingFunction(/[.?!]+(?=\\s*\\S)/)\n  //   const paragraphsCountValue = countingFunction(/\\r?\\n+(?=\\s*\\S)/)\n  //   const pronounsCountValue = textValue?.split(/\\s+|[\\W_]+/)?.filter(word => pronouns.includes(word.toLowerCase())).length || 0\n  //   const longestWordValue = textValue?.split(/[\\s,?.!]+/).reduce((longestWord: string, currentWord: string) => {\n  //     return currentWord.length > longestWord.length ? currentWord : longestWord;\n  //   },);\n  //   setWordsCount(wordsCountValue)\n  //   setCharactersCount(charactersCountValue)\n  //   setSentencesCount(sentencesCountValue)\n  //   setParagraphsCount(paragraphsCountValue)\n  //   setPronounsCount(pronounsCountValue)\n  //   setLongestWord(longestWordValue || \"-\")\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"textarea\", {\n    className: \"text-area\",\n    placeholder: \"Paste your text here...\",\n    autoFocus: true,\n    onChange: handleTextAreaChange,\n    ref: textAreaRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 10\n  }, this);\n};\n_s(TextArea, \"BYbRnLSQDOLW5pbx+V/xItG+Mbw=\");\n_c = TextArea;\nexport default TextArea;\nvar _c;\n$RefreshReg$(_c, \"TextArea\");","map":{"version":3,"names":["useRef","pronouns","TextArea","setWordsCount","setCharactersCount","setSentencesCount","setParagraphsCount","setPronounsCount","setLongestWord","textAreaRef","handleTextAreaChange","textValue","current","value","whiteSpaceRegex","specialCharacterRegex","sentenceRegex","paragraphBreakRegex","pronounsRegex","handleCounting","regex","split","length","wordsCountValue","charactersCountValue","sentencesCountValue","paragraphsCountValue","pronounsCountValue","filter","word","includes","toLowerCase"],"sources":["/Users/manidavilay/Documents/Projets/practical-reactjs-coding-challenges/text-analyzer-tool/src/components/TextArea/index.tsx"],"sourcesContent":["import { useRef } from 'react'\nimport { pronouns } from \"../../data/pronouns\"\nimport './index.scss'\n\ninterface Props {\n  setWordsCount: (value: number) => void\n  setCharactersCount: (value: number) => void\n  setSentencesCount: (value: number) => void\n  setParagraphsCount: (value: number) => void\n  setPronounsCount: (value: number) => void\n  setLongestWord: (value: string) => void\n}\n\nconst TextArea = ({ setWordsCount, setCharactersCount, setSentencesCount, setParagraphsCount, setPronounsCount, setLongestWord }: Props) => {\n  const textAreaRef = useRef<HTMLTextAreaElement>(null);\n\n  const handleTextAreaChange = () => {\n    const textValue = textAreaRef.current?.value || \"\"\n\n    const whiteSpaceRegex = \" \"\n    const specialCharacterRegex = \"\"\n    const sentenceRegex = /[.?!]+(?=\\s*\\S)/\n    const paragraphBreakRegex = /\\r?\\n+(?=\\s*\\S)/\n    const pronounsRegex = /\\s+|[\\W_]+/\n\n    const handleCounting = (regex: RegExp | string) => {\n      return textValue ? textValue.split(regex).length : 0\n    }\n\n    const wordsCountValue = handleCounting(whiteSpaceRegex)\n    const charactersCountValue = handleCounting(specialCharacterRegex)\n    const sentencesCountValue = handleCounting(sentenceRegex)\n    const paragraphsCountValue = handleCounting(paragraphBreakRegex)\n    const pronounsCountValue = textValue ? textValue.split(pronounsRegex).filter(word => pronouns.includes(word.toLowerCase())).length : 0\n\n    setWordsCount(wordsCountValue)\n    setCharactersCount(charactersCountValue)\n    setSentencesCount(sentencesCountValue)\n    setParagraphsCount(paragraphsCountValue)\n    setPronounsCount(pronounsCountValue)\n  }\n\n  // const handleTextAreaChange = () => {\n  //   const textValue = textAreaRef.current?.value\n  //   const countingFunction = (regex: RegExp | string) => {\n  //     if (!textValue) {\n  //       return 0\n  //     }\n  //     return textValue?.split(regex).length\n  //   }\n  //   const wordsCountValue = countingFunction(\" \")\n  //   const charactersCountValue = countingFunction(\"\")\n  //   const sentencesCountValue = countingFunction(/[.?!]+(?=\\s*\\S)/)\n  //   const paragraphsCountValue = countingFunction(/\\r?\\n+(?=\\s*\\S)/)\n  //   const pronounsCountValue = textValue?.split(/\\s+|[\\W_]+/)?.filter(word => pronouns.includes(word.toLowerCase())).length || 0\n  //   const longestWordValue = textValue?.split(/[\\s,?.!]+/).reduce((longestWord: string, currentWord: string) => {\n  //     return currentWord.length > longestWord.length ? currentWord : longestWord;\n  //   },);\n  //   setWordsCount(wordsCountValue)\n  //   setCharactersCount(charactersCountValue)\n  //   setSentencesCount(sentencesCountValue)\n  //   setParagraphsCount(paragraphsCountValue)\n  //   setPronounsCount(pronounsCountValue)\n  //   setLongestWord(longestWordValue || \"-\")\n  // }\n\n  return <textarea className=\"text-area\" placeholder=\"Paste your text here...\" autoFocus onChange={handleTextAreaChange} ref={textAreaRef} />\n}\n\nexport default TextArea\n"],"mappings":";;AAAA,SAASA,MAAM,QAAQ,OAAO;AAC9B,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,OAAO,cAAc;AAAA;AAWrB,MAAMC,QAAQ,GAAG,QAA2H;EAAA;EAAA,IAA1H;IAAEC,aAAa;IAAEC,kBAAkB;IAAEC,iBAAiB;IAAEC,kBAAkB;IAAEC,gBAAgB;IAAEC;EAAsB,CAAC;EACrI,MAAMC,WAAW,GAAGT,MAAM,CAAsB,IAAI,CAAC;EAErD,MAAMU,oBAAoB,GAAG,MAAM;IAAA;IACjC,MAAMC,SAAS,GAAG,yBAAAF,WAAW,CAACG,OAAO,yDAAnB,qBAAqBC,KAAK,KAAI,EAAE;IAElD,MAAMC,eAAe,GAAG,GAAG;IAC3B,MAAMC,qBAAqB,GAAG,EAAE;IAChC,MAAMC,aAAa,GAAG,iBAAiB;IACvC,MAAMC,mBAAmB,GAAG,iBAAiB;IAC7C,MAAMC,aAAa,GAAG,YAAY;IAElC,MAAMC,cAAc,GAAIC,KAAsB,IAAK;MACjD,OAAOT,SAAS,GAAGA,SAAS,CAACU,KAAK,CAACD,KAAK,CAAC,CAACE,MAAM,GAAG,CAAC;IACtD,CAAC;IAED,MAAMC,eAAe,GAAGJ,cAAc,CAACL,eAAe,CAAC;IACvD,MAAMU,oBAAoB,GAAGL,cAAc,CAACJ,qBAAqB,CAAC;IAClE,MAAMU,mBAAmB,GAAGN,cAAc,CAACH,aAAa,CAAC;IACzD,MAAMU,oBAAoB,GAAGP,cAAc,CAACF,mBAAmB,CAAC;IAChE,MAAMU,kBAAkB,GAAGhB,SAAS,GAAGA,SAAS,CAACU,KAAK,CAACH,aAAa,CAAC,CAACU,MAAM,CAACC,IAAI,IAAI5B,QAAQ,CAAC6B,QAAQ,CAACD,IAAI,CAACE,WAAW,EAAE,CAAC,CAAC,CAACT,MAAM,GAAG,CAAC;IAEtInB,aAAa,CAACoB,eAAe,CAAC;IAC9BnB,kBAAkB,CAACoB,oBAAoB,CAAC;IACxCnB,iBAAiB,CAACoB,mBAAmB,CAAC;IACtCnB,kBAAkB,CAACoB,oBAAoB,CAAC;IACxCnB,gBAAgB,CAACoB,kBAAkB,CAAC;EACtC,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBAAO;IAAU,SAAS,EAAC,WAAW;IAAC,WAAW,EAAC,yBAAyB;IAAC,SAAS;IAAC,QAAQ,EAAEjB,oBAAqB;IAAC,GAAG,EAAED;EAAY;IAAA;IAAA;IAAA;EAAA,QAAG;AAC7I,CAAC;AAAA,GAtDKP,QAAQ;AAAA,KAARA,QAAQ;AAwDd,eAAeA,QAAQ;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}