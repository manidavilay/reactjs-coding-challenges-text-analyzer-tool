{"ast":null,"code":"var _jsxFileName = \"/Users/manidavilay/Documents/Projets/practical-reactjs-coding-challenges/text-analyzer-tool/src/components/TextArea/index.tsx\",\n  _s = $RefreshSig$();\nimport { useRef } from 'react';\nimport { pronouns } from \"../../data/pronouns\";\nimport './index.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TextArea = _ref => {\n  _s();\n  let {\n    setWordsCount,\n    setCharactersCount,\n    setSentencesCount,\n    setParagraphsCount,\n    setPronounsCount\n  } = _ref;\n  const textAreaRef = useRef(null);\n  const handleTextAreaChange = () => {\n    var _textAreaRef$current, _textValue$split;\n    const textValue = (_textAreaRef$current = textAreaRef.current) === null || _textAreaRef$current === void 0 ? void 0 : _textAreaRef$current.value;\n    const countingFunction = regex => {\n      return (textValue === null || textValue === void 0 ? void 0 : textValue.trim()) && (textValue === null || textValue === void 0 ? void 0 : textValue.split(regex).length) || 0;\n    };\n    const wordsCountValue = countingFunction(/\\s+(?=\\S)/);\n    const charactersCountValue = countingFunction(\"\");\n    const sentencesCountValue = countingFunction(/[.?!]+(?=\\s*\\S)/);\n    const paragraphsCountValue = countingFunction(/\\r?\\n+(?=\\s*\\S)/);\n    const pronounsCountValue = (textValue === null || textValue === void 0 ? void 0 : textValue.trim()) && (textValue === null || textValue === void 0 ? void 0 : (_textValue$split = textValue.split(/\\s+/)) === null || _textValue$split === void 0 ? void 0 : _textValue$split.filter(word => pronouns.includes(word.toLowerCase())).length) || 0;\n    setWordsCount(wordsCountValue);\n    setCharactersCount(charactersCountValue);\n    setSentencesCount(sentencesCountValue);\n    setParagraphsCount(paragraphsCountValue);\n    setPronounsCount(pronounsCountValue);\n    const longestWordValue = textValue === null || textValue === void 0 ? void 0 : textValue.split(/\\s+/).reduce((longestWord, currentWord) => {\n      return currentWord.length > longestWord.length ? currentWord : longestWord;\n    }, \"\");\n    console.log(111, longestWordValue);\n    return longestWordValue;\n  };\n  return /*#__PURE__*/_jsxDEV(\"textarea\", {\n    className: \"text-area\",\n    placeholder: \"Paste your text here...\",\n    autoFocus: true,\n    onChange: handleTextAreaChange,\n    ref: textAreaRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 10\n  }, this);\n};\n_s(TextArea, \"BYbRnLSQDOLW5pbx+V/xItG+Mbw=\");\n_c = TextArea;\nexport default TextArea;\nvar _c;\n$RefreshReg$(_c, \"TextArea\");","map":{"version":3,"names":["useRef","pronouns","TextArea","setWordsCount","setCharactersCount","setSentencesCount","setParagraphsCount","setPronounsCount","textAreaRef","handleTextAreaChange","textValue","current","value","countingFunction","regex","trim","split","length","wordsCountValue","charactersCountValue","sentencesCountValue","paragraphsCountValue","pronounsCountValue","filter","word","includes","toLowerCase","longestWordValue","reduce","longestWord","currentWord","console","log"],"sources":["/Users/manidavilay/Documents/Projets/practical-reactjs-coding-challenges/text-analyzer-tool/src/components/TextArea/index.tsx"],"sourcesContent":["import { useRef } from 'react'\nimport { pronouns } from \"../../data/pronouns\"\nimport './index.scss'\n\ninterface Props {\n  setWordsCount: (value: number) => void\n  setCharactersCount: (value: number) => void\n  setSentencesCount: (value: number) => void\n  setParagraphsCount: (value: number) => void\n  setPronounsCount: (value: number) => void\n}\n\nconst TextArea = ({ setWordsCount, setCharactersCount, setSentencesCount, setParagraphsCount, setPronounsCount }: Props) => {\n  const textAreaRef = useRef<HTMLTextAreaElement>(null);\n  const handleTextAreaChange = () => {\n    const textValue = textAreaRef.current?.value\n    const countingFunction = (regex: RegExp | string) => {\n      return (textValue?.trim() && textValue?.split(regex).length) || 0\n    }\n    const wordsCountValue = countingFunction(/\\s+(?=\\S)/)\n    const charactersCountValue = countingFunction(\"\")\n    const sentencesCountValue = countingFunction(/[.?!]+(?=\\s*\\S)/)\n    const paragraphsCountValue = countingFunction(/\\r?\\n+(?=\\s*\\S)/)\n    const pronounsCountValue = (textValue?.trim() && (textValue?.split(/\\s+/))?.filter(word => pronouns.includes(word.toLowerCase())).length) || 0\n    setWordsCount(wordsCountValue)\n    setCharactersCount(charactersCountValue)\n    setSentencesCount(sentencesCountValue)\n    setParagraphsCount(paragraphsCountValue)\n    setPronounsCount(pronounsCountValue)\n\n    const longestWordValue = textValue?.split(/\\s+/).reduce((longestWord: string, currentWord: string) => {\n      return currentWord.length > longestWord.length ? currentWord : longestWord;\n    }, \"\");\n    console.log(111, longestWordValue)\n    return longestWordValue;\n  }\n\n  return <textarea className=\"text-area\" placeholder=\"Paste your text here...\" autoFocus onChange={handleTextAreaChange} ref={textAreaRef} />\n}\n\nexport default TextArea\n"],"mappings":";;AAAA,SAASA,MAAM,QAAQ,OAAO;AAC9B,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,OAAO,cAAc;AAAA;AAUrB,MAAMC,QAAQ,GAAG,QAA2G;EAAA;EAAA,IAA1G;IAAEC,aAAa;IAAEC,kBAAkB;IAAEC,iBAAiB;IAAEC,kBAAkB;IAAEC;EAAwB,CAAC;EACrH,MAAMC,WAAW,GAAGR,MAAM,CAAsB,IAAI,CAAC;EACrD,MAAMS,oBAAoB,GAAG,MAAM;IAAA;IACjC,MAAMC,SAAS,2BAAGF,WAAW,CAACG,OAAO,yDAAnB,qBAAqBC,KAAK;IAC5C,MAAMC,gBAAgB,GAAIC,KAAsB,IAAK;MACnD,OAAQ,CAAAJ,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEK,IAAI,EAAE,MAAIL,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEM,KAAK,CAACF,KAAK,CAAC,CAACG,MAAM,KAAK,CAAC;IACnE,CAAC;IACD,MAAMC,eAAe,GAAGL,gBAAgB,CAAC,WAAW,CAAC;IACrD,MAAMM,oBAAoB,GAAGN,gBAAgB,CAAC,EAAE,CAAC;IACjD,MAAMO,mBAAmB,GAAGP,gBAAgB,CAAC,iBAAiB,CAAC;IAC/D,MAAMQ,oBAAoB,GAAGR,gBAAgB,CAAC,iBAAiB,CAAC;IAChE,MAAMS,kBAAkB,GAAI,CAAAZ,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEK,IAAI,EAAE,MAAKL,SAAS,aAATA,SAAS,2CAATA,SAAS,CAAEM,KAAK,CAAC,KAAK,CAAC,qDAAxB,iBAA2BO,MAAM,CAACC,IAAI,IAAIvB,QAAQ,CAACwB,QAAQ,CAACD,IAAI,CAACE,WAAW,EAAE,CAAC,CAAC,CAACT,MAAM,KAAK,CAAC;IAC9Id,aAAa,CAACe,eAAe,CAAC;IAC9Bd,kBAAkB,CAACe,oBAAoB,CAAC;IACxCd,iBAAiB,CAACe,mBAAmB,CAAC;IACtCd,kBAAkB,CAACe,oBAAoB,CAAC;IACxCd,gBAAgB,CAACe,kBAAkB,CAAC;IAEpC,MAAMK,gBAAgB,GAAGjB,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEM,KAAK,CAAC,KAAK,CAAC,CAACY,MAAM,CAAC,CAACC,WAAmB,EAAEC,WAAmB,KAAK;MACpG,OAAOA,WAAW,CAACb,MAAM,GAAGY,WAAW,CAACZ,MAAM,GAAGa,WAAW,GAAGD,WAAW;IAC5E,CAAC,EAAE,EAAE,CAAC;IACNE,OAAO,CAACC,GAAG,CAAC,GAAG,EAAEL,gBAAgB,CAAC;IAClC,OAAOA,gBAAgB;EACzB,CAAC;EAED,oBAAO;IAAU,SAAS,EAAC,WAAW;IAAC,WAAW,EAAC,yBAAyB;IAAC,SAAS;IAAC,QAAQ,EAAElB,oBAAqB;IAAC,GAAG,EAAED;EAAY;IAAA;IAAA;IAAA;EAAA,QAAG;AAC7I,CAAC;AAAA,GA1BKN,QAAQ;AAAA,KAARA,QAAQ;AA4Bd,eAAeA,QAAQ;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}